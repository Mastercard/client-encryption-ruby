# frozen_string_literal: true

require_relative 'field_level_encryption'
require_relative 'jwe_encryption'
require_relative 'utils/utils'

module McAPI
  module Encryption
    ##
    # Service class that provide interceptor facilities for OpenApi swagger client
    #
    class OpenAPIInterceptor
      class << self
        #
        # Install the field level encryption in the OpenAPI HTTP client
        # adding encryption/decryption capabilities for the request/response payload.
        #
        # @param [Object] swagger_client OpenAPI service client (it can be generated by the swagger code generator)
        # @param [Hash] config configuration object describing which field to enable encryption/decryption
        #
        def install_field_level_encryption(swagger_client, config)
          fle = McAPI::Encryption::FieldLevelEncryption.new(config)
          # Hooking ApiClient#call_api
          hook_call_api fle
          # Hooking ApiClient#deserialize
          hook_deserialize fle
          McAPI::Encryption::OpenAPIInterceptor.init_call_api swagger_client
          McAPI::Encryption::OpenAPIInterceptor.init_deserialize swagger_client
        end

        #
        # Install the JWE encryption in the OpenAPI HTTP client
        # adding encryption/decryption capabilities for the request/response payload.
        #
        # @param [Object] swagger_client OpenAPI service client (it can be generated by the swagger code generator)
        # @param [Hash] config configuration object describing which field to enable encryption/decryption
        #
        def install_jwe_encryption(swagger_client, config)
          jwe = McAPI::Encryption::JweEncryption.new(config)
          # Hooking ApiClient#call_api
          hook_call_api jwe
          # Hooking ApiClient#deserialize
          hook_deserialize jwe
          McAPI::Encryption::OpenAPIInterceptor.init_call_api swagger_client
          McAPI::Encryption::OpenAPIInterceptor.init_deserialize swagger_client
        end

        private

        def hook_call_api(enc)
          self.class.send :define_method, :init_call_api do |client|
            client.define_singleton_method(:call_api) do |http_method, path, opts|
              if opts && opts[:body]
                if enc.instance_of? McAPI::Encryption::FieldLevelEncryption
                  encrypted = enc.encrypt(path, opts[:header_params], opts[:body])
                  opts[:body] = JSON.generate(encrypted[:body])
                else
                  encrypted = enc.encrypt(path, opts[:body])
                  opts[:body] = JSON.generate(encrypted[:body])
                end
              end
              # noinspection RubySuperCallWithoutSuperclassInspection
              super(http_method, path, opts)
            end
          end
        end

        def hook_deserialize(enc)
          self.class.send :define_method, :init_deserialize do |client|
            client.define_singleton_method(:deserialize) do |response, return_type|
              if response&.body
                endpoint = response.request.base_url.sub client.config.base_url, ''
                to_decrypt = { headers: McAPI::Utils.parse_header(response.options[:response_headers]),
                               request: { url: endpoint },
                               body: JSON.parse(response.body) }

                decrypted = enc.decrypt(JSON.generate(to_decrypt, symbolize_names: false))
                body = JSON.generate(JSON.parse(decrypted)['body'])
                if enc.instance_of? McAPI::Encryption::JweEncryption
                  body = McAPI::Utils.parse_decrypted_payload(body)
                end
                response.options[:response_body] = JSON.generate(JSON.parse(body))
              end
              # noinspection RubySuperCallWithoutSuperclassInspection
              super(response, return_type)
            end
          end
        end
      end
    end
  end
end
